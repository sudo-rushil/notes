global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# Top-Level Environment Snippets

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet th "theorem" bA
\begin{theorem}
	$1
\end{theorem}
endsnippet

snippet pf "proof" bA
\begin{proof}
	$1
\end{proof}
endsnippet

snippet pr "proposition" bA
\begin{proposition}
	$1
\end{proposition}
endsnippet

snippet lm "lemma" bA
\begin{lemma}
	$1
\end{lemma}
endsnippet

snippet cr "corollary" bA
\begin{corollary}
	$1
\end{corollary}
endsnippet

snippet df "defn" bA
\begin{defn}
	$1
\end{defn}
endsnippet

snippet fa "fact" bA
\begin{fact}
	$1
\end{fact}
endsnippet

snippet ex "example" bA
\begin{example}
	$1
\end{example}
endsnippet

snippet rm "remark" bA
\begin{remark}
	$1
\end{remark}
endsnippet

snippet dg "digression" bA
\begin{digression}
	$1
\end{digression}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}[(a)]
	\item $1
\end{enumerate}
endsnippet

snippet il "Itemize (List)" bA
\begin{itemize}
	\item $1
\end{itemize}
endsnippet

### Testing for efficacy
snippet it "item" bA
\item 
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

# Math Environments and Braces

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':', ';']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet d.m "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet d,m "Math" wA
\[
${1:${VISUAL}}
,\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet

context "math()"
snippet box "Boxed math" wA
\boxed{$1}
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet udbr "underbrace" wA
\underbrace{$1}_{$2}
endsnippet

context "math()"
snippet fun "Function" iA
$1\colon $2 \to $3 
endsnippet

snippet bigfn "Big function" iA
\begin{align*}
	$1\colon $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $0
.\end{align*}
endsnippet

context "math()"
snippet ibs "i-indexed basis" wA
\\{{$1}_i\\}
endsnippet

context "math()"
snippet jbs "j-indexed basis" wA
\\{{$1}_j\\}
endsnippet

context "math()"
snippet bs "indexed basis" wA
\\{{$1}_{$2}\\}
endsnippet

snippet emph "emphasis" wA
\emph{$1}`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':', ';']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor $0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left\langle ${1:${VISUAL}} \right\rangle$0
endsnippet

# Symbols, Subscripts, Superscripts

priority 100
context "math()"
snippet ... "ldots" iA
\ldots 
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mbb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet mfrak "mathfrak" iA
\mathfrak{$1}$0
endsnippet

priority 300
context "math()"
snippet '(?<!\\)(phi|lambda|varphi|psi|pi|mu|rho|sigma|tau|chi)' "greeks" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 400
context "math()"
snippet eig "eigenvalue" iA
\lambda 
endsnippet

context "math()"
snippet vphi "varphi" iA
\varphi 
endsnippet

context "math()"
snippet sig "sigma" iA
\sigma 
endsnippet

priority 100
context "math()"
snippet ooo "\infty" iA
\infty 
endsnippet

context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet RR "reals" iA
\R 
endsnippet

context "math()"
snippet ZZ "integers" iA
\Z 
endsnippet

context "math()"
snippet CC "complex" iA
\C 
endsnippet

context "math()"
snippet OO "emptyset" iA
\O 
endsnippet

priority 300
context "math()"
snippet 'F(\d)' "field" irA
\F_`!p snip.rv = match.group(1)` 
endsnippet

priority 100
context "math()"
snippet FF "field" iA
\F 
endsnippet

context "math()"
snippet QQ "forall" iA
\Q 
endsnippet

context "math()"
snippet PP "powerset" iA
\P 
endsnippet

snippet lll "l" iA
\ell 
endsnippet

context "math()"
snippet sr "^2" iA
^2 
endsnippet

context "math()"
snippet cb "^3" iA
^3 
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)` 
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`} 
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet --1 "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet perp "perpendicular" iA
^{\perp}
endsnippet

context "math()"
snippet --t "transpose" iA
^{t}
endsnippet

context "math()"
snippet dl "dual" iA
^{*}
endsnippet

priority 110
context "math()"
snippet ddl "ddual" iA
^{**}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 200
context "math()"
snippet "([A-Z])mbb" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`} 
endsnippet

context "math()"
snippet "([A-Z])mcal" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`} 
endsnippet

snippet "([A-Za-z])mk" "math mode" rwA
$`!p snip.rv=match.group(1)`$ 
endsnippet

priority 0

# Operators, Arrows

## Operators

context "math()"
snippet +... "ldot sum" iA
+ \ldots + 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\norm{$1} $0
endsnippet

context "math()"
snippet @ "tensor" iA
\otimes 
endsnippet

context "math()"
snippet op "oplus" iA
\oplus 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet Uu "cup" iA
\cup 
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet c=c "subseteq" Ai
\subseteq 
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <] "normaleq" iA
\trianglelefteq 
endsnippet

snippet x! "semidirect" iA
\rtimes 
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus 
endsnippet

snippet >> ">>" iA
\gg 
endsnippet

snippet << "<<" iA
\ll 
endsnippet

snippet || "mid" iA
\mid  
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

snippet ~~ "sym" iA
\sim 
endsnippet

snippet ~= "cong" iA
\cong 
endsnippet

## Arrows

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

context "math()"
snippet i> "injective arrow" iA
\inj 
endsnippet

context "math()"
snippet s> "surjective arrow" iA
\surj 
endsnippet

context "math()"
snippet x> "overarrow to" iA
\xrightarrow{$1}$0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow 
endsnippet

context "math()"
snippet => "implies" Ai
\implies 
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby 
endsnippet

context "math()"
snippet iff "iff" Ai
\iff 
endsnippet

# Fractions, Functions

## Fractions

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

#snippet / "Fraction" i
#\\frac{${VISUAL}}{$1}$0
#endsnippet

#context "math()"
#snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
#\\frac{`!p snip.rv = match.group(1)`}{$1}$0
#endsnippet

#priority 1000
#context "math()"
#snippet '^.*\)/' "() frac" wrA
#`!p
#stripped = match.string[:-1]
#depth = 0
#i = len(stripped) - 1
#while True:
#	 if stripped[i] == ')': depth += 1
#	 if stripped[i] == '(': depth -= 1
#	 if depth == 0: break;
#	 i-=1
#snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
#`{$1}$0
#endsnippet

## Functions
#  sqrt, lim, sum, prod, bigoplus, bigotimes, bigcap, bigcup

priority 300
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|gdual|gddual)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 400
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet


priority 500
context "math()"
snippet '(?<!\\)(dim|ker|im|id|spn|chr|ev|tr|vect|Hom|Mor|End|Sym|Aut|rank|Stab|gKer|evIm|nll|Ann)' "customfuncs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 100
context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet lvec "List of vectors" wA
{$1}_{$2},\ldots,{$1}_{$3} $0
endsnippet

context "math()"
snippet lsum "sum of vectors" wA
{$1}_{$2}+\ldots+{$1}_{$3} $0
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{$1} 
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{$1} 
endsnippet

context "math()"
snippet sum "sum" wA
\sum 
endsnippet

context "math()"
snippet vsum "sum" w
\sum_{$1} {$2} 
endsnippet

context "math()"
snippet vvsum "sum" w
\sum_{$1}^{$2} {$3} 
endsnippet

context "math()"
snippet prod "prod" w
\prod_{$1} {$2} 
endsnippet

context "math()"
snippet vprod "prod" w
\prod_{$1}^{$2} {$3} 
endsnippet

context "math()"
snippet lim "limit" w
\lim_{$1 \to $2}  
endsnippet

#snippet part "d/dx" w
#\frac{\partial ${1:V}}{\partial ${2:x}} $0
#endsnippet

priority 500
snippet bop "bigoplus" wA
\bigoplus
endsnippet

# vim:ft=snippets
