# Math 231 Snippets

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def text():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# Text Completions ––––––––––––––––––––––––––––––––––––––––

context "text()"
snippet abl "abelian" wA
abelian
endsnippet

context "text()"
snippet btwn "between" wA
between
endsnippet

context "text()"
snippet 'bd(y|s)' "boundary/boundaries" rwA
boundar`!p
if match.group(1) == 's':
	snip.rv = 'ies'
else:
	snip.rv = 'y'
`
endsnippet

context "text()"
snippet 'cat(y|s)' "category/categories" rwA
categor`!p
if match.group(1) == 's':
	snip.rv = 'ies'
else:
	snip.rv = 'y'
`
endsnippet

context "text()"
snippet '(pc|sc|c)nd' "connected" rwA
`!p
if match.group(1) == 'pc':
	snip.rv = 'path connected'
elif match.group(1) == 'sc':
	snip.rv = 'simply connected'
else:
	snip.rv = 'connected'
`
endsnippet

context "text()"
snippet cmpl "complete" wA
complete
endsnippet

context "text()"
snippet cplx "complex" wA
complex
endsnippet

context "text()"
snippet dgm "diagram" wA
diagram
endsnippet

context "text()"
snippet elt "element" wA
element
endsnippet

context "text()"
snippet 'eq(v|l)' "equivalence/equivalent" rwA
equivalen`!p
if match.group(1) == 'v':
	snip.rv = 'ce'
else:
	snip.rv = 't'
`
endsnippet

context "text()"
snippet '(hf|sf|f)b' "fibration" rwA
`!p
if match.group(1) == 'hf':
	snip.rv = 'Hurewicz fibration'
elif match.group(1) == 'sf':
	snip.rv = 'Serre fibration'
else:
	snip.rv = 'fibration'
`
endsnippet

context "text()"
snippet f/ "faithful" wA
faithful
endsnippet

context "text()"
snippet fl/ "fully faithful" wA
fully faithful
endsnippet

context "text()"
snippet fnt "functor" wA
functor
endsnippet

context "text()"
snippet 'gr(p|d)' "group/groupoid" rwA
`!p
if match.group(1) == 'p':
	snip.rv = 'group'
else:
	snip.rv = 'groupoid'
`
endsnippet

context "text()"
snippet 'h(l|e)p' "htpy property" rwA
homotopy `!p
if match.group(1) == 'e':
	snip.rv = 'extension'
else:
	snip.rv = 'lifting'
` property
endsnippet

context "text()"
snippet hmlg "homology" wA
homology
endsnippet

context "text()"
snippet 'htp(c|y|s)' "htpy" rwA
homotop`!p
if match.group(1) == 'c':
	snip.rv = 'ic'
elif match.group(1) == 's':
	snip.rv = 'ies'
else:
	snip.rv = 'y'
`
endsnippet

# context "text()"
# snippet 'iso(m|c)' "isomorphism/morphic" rwA
# isomorphi`!p
# if match.group(1) == 'm':
# 	snip.rv = 'sm'
# else:
# 	snip.rv = match.group(1)
# `
# endsnippet

# context "text()"
# snippet 'inj(v|n|y)' "injection" rwA
# inject`!p
# if match.group(1) == 'v':
# 	snip.rv = 'ive'
# elif match.group(1) == 'n':
# 	snip.rv = 'ion'
# else:
# 	snip.rv = 'ivity'
# `
# endsnippet

context "text()"
snippet lim "limit" wA
limit
endsnippet

context "text()"
snippet 'l(e|eh|eH|eC)s/' "long exact sequence" rwA
long exact `!p
_t = match.group(1)
if _t == 'eh':
	snip.rv = 'homotopy '
elif _t == 'eH':
	snip.rv = 'homology '
elif _t == 'eC':
	snip.rv = 'cohomology '
`sequence
endsnippet


# context "text()"
# snippet '(monom|epi|homom|morp)' "morphisms" rwA
# `!p
# _t = match.group(1)
# if _t == 'monom': snip.rv = 'monomorphism'
# elif _t == 'epi': snip.rv = 'epimorphism'
# elif _t == 'homom': snip.rv = 'homomorphism'
# else: snip.rv = 'morphism'
# `
# endsnippet

context "text()"
snippet 'n(t|i)/' "nat" riA
natural `!p
if match.group(1) == 't':
	snip.rv = 'transformation'
else:
	snip.rv = 'isomorphism'
`
endsnippet

context "text()"
snippet obj "object" wA
object
endsnippet

context "text()"
snippet pt "point" wA
point
endsnippet

context "text()"
snippet pbck "pullback" wA
pullback
endsnippet

context "text()"
snippet ses "short exact sequence" wA
short exact sequence
endsnippet

context "text()"
snippet spc "space" wA
space
endsnippet

context "text()"
snippet splx "simplex" wA
simplex
endsnippet

# context "text()"
# snippet 'surj(v|n|y)' "surjection" rwA
# surject`!p
# if match.group(1) == 'v':
# 	snip.rv = 'ive'
# elif match.group(1) == 'n':
# 	snip.rv = 'ion'
# else:
# 	snip.rv = 'ivity'
# `
# endsnippet

# context "text()"
# snippet 'top(y|s|c)' "topology/topologies/topological" rwA
# topolog`!p
# if match.group(1) == 's':
# 	snip.rv = 'ies'
# elif match.group(1) == 'c':
# 	snip.rv = 'ical'
# else:
# 	snip.rv = 'y'
# `
# endsnippet

context "text()"
snippet uq "unique" wA
unique
endsnippet

context "text()"
snippet w/ "with" wA
with
endsnippet

context "text()"
snippet x/ "exact" wA
exact
endsnippet

# Math Environments ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet mm3 "3 dim matrix" wA
\begin{pmatrix} $1 & $2 & $3 \\\\ $4 & $5 & $6 \\\\ $7 & $8 & $9 \end{pmatrix}
$0
endsnippet

# Delimiter ––––––––––––––––––––––––––––––––––––––––

context "math"
snippet <> "inner product" iA
\left\langle $1 \right\rangle 
endsnippet

context "math()"
snippet ][ "norm" iA
\| $1 \| $0
endsnippet

# Symbols/Spaces ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet PP "powerset" iA
\P 
endsnippet

priority 1100
context "math()"
snippet 'F(\d)' "field" irA
\F_`!p snip.rv = match.group(1)` 
endsnippet

context "math()"
snippet 'Z(\d)' "cyclic group" irA
\Z_{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet 'R(\d|m|n)' "Euclidean space" irA
\R^`!p snip.rv = match.group(1)` 
endsnippet

context "math()"
snippet 'S(\d|m|n)' "Spheres" irA
S^`!p snip.rv = match.group(1)` 
endsnippet

context "math()"
snippet 'D(\d|m|n)' "Disks" irA
D^`!p snip.rv = match.group(1)` 
endsnippet

# context "math()"
# snippet 'CP(\d|m|n)' "Complex Projective" irA
# \C P^`!p snip.rv = match.group(1)` 
# endsnippet
# 
# context "math()"
# snippet 'RP(\d|m|n)' "Real Projective" irA
# \R P^`!p snip.rv = match.group(1)` 
# endsnippet

# context "math()"
# snippet 'H(\d|m|n)' "Homology" irA
# H_`!p snip.rv = match.group(1)` 
# endsnippet

# context "math()"
# snippet 'p(\d|m|n)' "Homotopy Groups" irA
# \pi_`!p snip.rv = match.group(1)` 
# endsnippet

context "math()"
snippet P1 "Fundamental Groupoid" iA
\Pi_{\le 1} 
endsnippet

# Categories ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet '([A-Z])(s|f|q)' "Categories" riA
\\`!p snip.rv = match.group(2)`{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet '(s|f|q)([A-Z])' "Categories 2" riA
\\`!p snip.rv = match.group(1)`{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet bg "BG" iA
\q{B}_{$1} 
endsnippet

context "math()"
snippet '(?<!\\)(ho|Ab|Set|Cat|Top|Spaces)' "Cats" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

context "math()"
snippet --o "opposite" iA
^{\op} 
endsnippet

# Simplexes ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet del "del" iA
\del 
endsnippet

context "math()"
snippet '(\d|n|m)D' "standard n-simplex" riA
\Delta[`!p snip.rv = match.group(1)`] 
endsnippet

# Operators ––––––––––––––––––––––––––––––––––––––––

priority 100
context "math()"
snippet ox "tensor" iA
\otimes 
endsnippet

context "math()"
snippet op "oplus" iA
\oplus 
endsnippet

context "math()"
snippet OP "bigoplus" wA
\bigoplus 
endsnippet

context "math()"
snippet OX "bigotimes" wA
\bigotimes 
endsnippet

context "math()"
snippet ol "overline" wA
\ol{$1}
endsnippet

context "math()"
snippet ul "underline" wA
\ul{$1}
endsnippet

context "math()"
snippet tl "underline" wA
\tilde{$1}
endsnippet

# Equals ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet :: "colon" iA
\colon 
endsnippet

context "math()"
snippet := "coloneqq" iA
\coloneqq 
endsnippet

context "math()"
snippet ~= "simeq" iA
\simeq 
endsnippet

context "math()"
snippet =~ "cong" iA
\cong 
endsnippet

# Arrows ––––––––––––––––––––––––––––––––––––––––

priority 100
context "math()"
snippet '(\w{0,1})->' "to" riA
\xto{`!p snip.rv = match.group(1)`} 
endsnippet

context "math()"
snippet to "to" iA
\xto{$1} 
endsnippet

context "math()"
snippet To "to" iA
\xTo{$1} 
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet mon. "injective arrow" iA
\mon 
endsnippet

context "math()"
snippet epi. "surjective arrow" iA
\epi 
endsnippet

context "math()"
snippet iso. "isomorphism arrow" iA
\iso 
endsnippet

# Functions ––––––––––––––––––––––––––––––––––––––––

priority 1200
context "math()"
snippet '(?<!\\)(dim|ker|im|id|Hom|Aut|Map|Ext|RP|CP|Tor|Stab|GL|SL|PSL|PGL|dlim|ilim|colim|lim|cpd)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

# Diagrams ––––––––––––––––––––––––––––––––––––––––

priority 2000
snippet cd "commutative diagram" bA
\[\begin{tikzcd}[$1]
	$2
\end{tikzcd}\]
endsnippet

context "env('tikzcd')"
snippet lg "large" iA
large 
endsnippet

context "env('tikzcd')"
snippet sl "small" iA
small 
endsnippet

context "env('tikzcd')"
snippet ty "tiny" iA
tiny 
endsnippet

context "env('tikzcd')"
snippet ft "from, to" iA
from=$1, to=$2, 
endsnippet

context "env('tikzcd')"
snippet red "red color" iA
color={rgb,255:red,196;green,49;blue,49}, 
endsnippet

context "env('tikzcd')"
snippet grn "green color" iA
color={rgb,255:red,46;green,168;blue,70}, 
endsnippet

context "env('tikzcd')"
snippet 'cr(u|v)' "curve up down" riA
`!p
if match.group(1) == 'u':
	snip.rv = 'curve={height=-12pt}, '
else:
	snip.rv = 'curve={height=12pt}, '
endsnippet

context "env('tikzcd')"
snippet '(ra|da|la|ua|a)r' "arrow" riA
\\`!p snip.rv = match.group(1)`r["$1", $2] 
endsnippet

context "env('tikzcd')"
snippet !> "mapsto" iA
\tmto[$1] 
endsnippet

context "env('tikzcd')"
snippet ij "injective arrow" iA
\tinj[$1] 
endsnippet

context "env('tikzcd')"
snippet epi "epimorphism arrow" iA
\tepi[$1] 
endsnippet

context "env('tikzcd')"
snippet mon "monomorphism arrow" iA
\tmon[$1] 
endsnippet

context "env('tikzcd')"
snippet iso "isomorphism arrow" iA
\tiso[$1] 
endsnippet

context "env('tikzcd')"
snippet dash "dashed arrow" iA
\tdash[$1] 
endsnippet

# Category Diagrams ––––––––––––––––––––––––––––––––––––––––

snippet '(\w{0,1})-(\w{0,1})nat' "natural" brA
\[\begin{tikzcd}[sep=large]
	`!p snip.rv = match.group(1)`$1 
	\ar[r, "$3_{$1}"] 
	\ar[d, "`!p snip.rv = match.group(1)`$4 "'] &
	`!p snip.rv = match.group(2)`$1 
	\ar[d, "`!p snip.rv = match.group(2)`$4 "] \\\\
	`!p snip.rv = match.group(1)`$2
	\ar[r,"$3_{$2}"] & 
	`!p snip.rv = match.group(2)`$2 
\end{tikzcd}\] 
endsnippet

snippet '(\w{0,1})-(\w{0,1})niso' "niso" brA
\[\begin{tikzcd}[sep=large]
	`!p snip.rv = match.group(1)`$1 
	\tiso[r] 
	\ar[d, "`!p snip.rv = match.group(1)`$4 "'] &
	`!p snip.rv = match.group(2)`$1 
	\ar[d, "`!p snip.rv = match.group(2)`$4 "] \\\\
	`!p snip.rv = match.group(1)`$2
	\tiso[r] & 
	`!p snip.rv = match.group(2)`$2 
\end{tikzcd}\]
endsnippet

snippet plbk "pullback" bA
\[\begin{tikzcd}[sep=large]
	$1 \ar[r, "$5"] \ar[d, "$6"'] & $2 \ar[d,"$7"] \\\\
	$3 \ar[r,"$8"] & $4
	\tlr[from=1-1, to=2-2]
\end{tikzcd}\]
endsnippet

snippet phot "pushout" bA
\[\begin{tikzcd}[sep=large]
	$1 \ar[r, "$5"] \ar[d, "$6"'] & $2 \ar[d,"$7"] \\\\
	$3 \ar[r,"$8"] & $4
	\tud[from=2-2, to=1-1]
\end{tikzcd}\]
endsnippet

# Homotopy Diagrams ––––––––––––––––––––––––––––––––––––––––

snippet fib "fibration" bA
\[\begin{tikzcd}[sep=large]
	X \ar[r, "f"] \ar[d, "\iota_0"'] & E \ar[d,"p"] \\\\
	X \times I \ar[r,"h"] \tdash[ur,"\tilde{h}"] & B
\end{tikzcd}\]
endsnippet

snippet cof "cofibration" bA
\[\begin{tikzcd}[sep=large]
	A \ar[r, "h"] \ar[d, "i"'] & Y^I \ar[d,"p_0"] \\\\
	X \ar[r,"f"] \tdash[ur,"\tilde{h}"] & Y
\end{tikzcd}\]
endsnippet

# Algebra Diagrams ––––––––––––––––––––––––––––––––––––––––

#ses
snippet ses "short exact sequence" bA
\[\begin{tikzcd}[sep=large]
	0 \ar[r] &
	$1 \ar[r, "$4"] &
	$2 \ar[r, "$5"] &
	$3 \ar[r] & 0
\end{tikzcd}\]
endsnippet

#les

# General Diagrams ––––––––––––––––––––––––––––––––––––––––

#lift
snippet lf "lift" bA
\[\begin{tikzcd}[sep=large]
	& $1 \ar[d, "$4"] \\\\
	$2 \ar[r, "$5"'] \tdash[ur, "$6"] & $3
\end{tikzcd}\]
endsnippet

#extend
snippet xt "extend" bA
\[\begin{tikzcd}[sep=large]
	$1 \ar[d, "$4"'] \ar[r, "$5"] &
	$2 \tdash[dl, "$6"] \\\\ $3
\end{tikzcd}\]
endsnippet

#over
snippet ov "over" bA
\[\begin{tikzcd}[column sep=small]
	$1 \ar[rr, "$4"] \ar[dr, "$5"'] & & 
	$2 \ar[dl, "$6"] \\\\
	& $3 &
\end{tikzcd}\]
endsnippet

#under
snippet un "under" bA
\[\begin{tikzcd}[column sep=small]
	& $1 \ar[dl, "4"'] \ar[dr, "$5"] & \\\\
	$2 \ar[rr, "$6"] & & $3
\end{tikzcd}\]
endsnippet

#square
snippet sq "square" bA
\[\begin{tikzcd}
	$1 \ar[r, "$5"] \ar[d, "$6"'] &
	$2 \ar[d, "$7"] \\\\
	$3 \ar[r, "$8"'] & $4
\end{tikzcd}\]
endsnippet
