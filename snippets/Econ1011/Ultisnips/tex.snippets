# Econ1011 Snippets

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def text():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# Text Completions ––––––––––––––––––––––––––––––––––––––––

context "text()"
snippet cb "Cobb-Douglas" wA
Cobb-Douglas
endsnippet

context "text()"
snippet co. "constraint" wA
constraint
endsnippet

context "text()"
snippet dr. "derivative" wA
derivative
endsnippet

context "text()"
snippet foc "first order condition" wA
first order condition
endsnippet

context "text()"
snippet gl. "global" wA
global
endsnippet

context "text()"
snippet lc "local" wA
local
endsnippet

context "text()"
snippet lg "Lagrangian" wA
Lagrangian
endsnippet

context "text()"
snippet mi. "minimum" wA
minimum
endsnippet

context "text()"
snippet mx "maximum" wA
maximum
endsnippet

context "text()"
snippet om. "optimize" wA
optimize
endsnippet

context "text()"
snippet op. "optimum" wA
optimium
endsnippet

context "text()"
snippet pt "partial" wA
partial
endsnippet

context "text()"
snippet to. "total" wA
total
endsnippet

# Notation ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet -s "optimum" iA
^\ast
endsnippet

context "math()"
snippet a. "alpha" iA
\alpha 
endsnippet

context "math()"
snippet b. "beta" iA
\beta 
endsnippet

context "math()"
snippet d. "delta" iA
\delta 
endsnippet

context "math()"
snippet g. "gamma" iA
\gamma 
endsnippet

context "math()"
snippet h. "theta" iA
\theta 
endsnippet

context "math()"
snippet k. "kappa" iA
\kappa 
endsnippet

context "math()"
snippet l. "lambda" iA
\lambda 
endsnippet

context "math()"
snippet r. "rho" iA
\rho 
endsnippet

context "math()"
snippet s. "sigma" iA
\sigma 
endsnippet

context "math()"
snippet t. "tau" iA
\tau 
endsnippet


# Differentials ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet lm "limit" wA
\lim_{$1 \to $2}  
endsnippet

context "math()"
snippet 'dd([A-Za-z])' "d/dx" wrA
\dv{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet dr "dy/dx" wA
\deriv{$1}{$2} $0
endsnippet

context "math()"
snippet 'pp([A-Za-z])' "∂/∂x" wrA
\pv{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet pr "∂y/∂x" wA
\pderiv{$1}{$2} $0
endsnippet

# Setups ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet do "defined on" wA
\text{ defined on }
endsnippet

# Functions ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet lv "List of vectors" wA
{$1}_{$2},\ldots,{$1}_{$3} $0
endsnippet

priority 1200
context "math()"
snippet '(?<!\\)(grad|lag|bm|dv|deriv|pv|pderiv|del|max|min)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet