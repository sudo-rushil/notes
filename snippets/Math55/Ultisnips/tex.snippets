# Math55 Snippets

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def text():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# Text Completions ––––––––––––––––––––––––––––––––––––––––

priority 1000
context "text()"
snippet az "abelian" wA
abelian
endsnippet

context "text()"
snippet bs "basis" wA
basis
endsnippet

context "text()"
snippet cj "conjugacy" wA
conjugacy
endsnippet

context "text()"
snippet dl "dimensional" wA
dimensional
endsnippet

context "text()"
snippet fn "finite" wA
finite
endsnippet

context "text()"
snippet gd "generated" wA
generated
endsnippet

context "text()"
snippet gp "group" wA
group
endsnippet

context "text()"
snippet hm "homomorphism" wA
homomorphism
endsnippet

context "text()"
snippet ij "injective" wA
injective
endsnippet

context "text()"
snippet ip "isomorphism" wA
isomorphism
endsnippet

context "text()"
snippet ir "irreducible" wA
irreducible
endsnippet

context "text()"
snippet iv "inverse" wA
inverse
endsnippet

context "text()"
snippet iw "invariant" wA
invariant
endsnippet

context "text()"
snippet lr "linear" wA
linear
endsnippet

context "text()"
snippet lt "let be a" wA
let $1 be a
endsnippet

context "text()"
snippet rp "representation" wA
representation
endsnippet

context "text()"
snippet sb "subspace" wA
subspace
endsnippet

context "text()"
snippet sg "subgroup" wA
subgroup
endsnippet

context "text()"
snippet sj "surjective" wA
surjective
endsnippet

context "text()"
snippet sv "space" wA
space
endsnippet

context "text()"
snippet vc "vector" wA
vector
endsnippet

context "text()"
snippet vs "vector space" wA
vector space
endsnippet

# Math Environments ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet '([ijk])bs' "indexed basis" wrA
\\{{$1}_{`!p snip.rv = match.group(1)`}\\}
endsnippet

context "math()"
snippet bs "basis" wA
\\{{$1}_{$2}\\}
endsnippet

# Delimiter ––––––––––––––––––––––––––––––––––––––––

context "math"
snippet <> "inner product" wA
\left\langle $1 \right\rangle
endsnippet

context "math()"
snippet ][ "norm" iA
\norm{$1} $0
endsnippet

# Symbols ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet eig "eigenvalue" iA
\lambda 
endsnippet

context "math()"
snippet vphi "varphi" iA
\varphi 
endsnippet

context "math()"
snippet sig "sigma" iA
\sigma 
endsnippet

context "math()"
snippet lll "l" iA
\ell 
endsnippet

context "math()"
snippet PP "powerset" iA
\P 
endsnippet

priority 1100
context "math()"
snippet 'F(\d)' "field" irA
\F_`!p snip.rv = match.group(1)` 
endsnippet

context "math()"
snippet 'Z(\d)' "cyclic group" irA
\Z/`!p snip.rv = match.group(1)` 
endsnippet

# Superscripts ––––––––––––––––––––––––––––––––––––––––

priority 1000
context "math()"
snippet --p "perpendicular" iA
^{\perp}
endsnippet

context "math()"
snippet --t "transpose" iA
^{t}
endsnippet

context "math()"
snippet --d "dual" iA
^{*}
endsnippet

context "math()"
snippet --* "ddual" iA
^{**}
endsnippet

# Operators ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet @ "tensor" iA
\otimes 
endsnippet

context "math()"
snippet op "oplus" iA
\oplus 
endsnippet

context "math()"
snippet bop "bigoplus" wA
\bigoplus
endsnippet

context "math()"
snippet b@ "bigotimes" wA
\bigotimes
endsnippet

# Group Relations ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet <] "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <! "normaleq" iA
\trianglelefteq 
endsnippet

context "math()"
snippet x! "semidirect" iA
\rtimes 
endsnippet

context "math()"
snippet ~= "simeq" iA
\simeq 
endsnippet

context "math()"
snippet =~ "cong" iA
\cong 
endsnippet

# Advanced Arrows ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet ij. "injective arrow" iA
\inj 
endsnippet

context "math()"
snippet sj. "surjective arrow" iA
\surj 
endsnippet

context "math()"
snippet xa. "overarrow to" iA
\xrightarrow{$1}$0
endsnippet

# Functions ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet lv "List of vectors" wA
{$1}_{$2},\ldots,{$1}_{$3} $0
endsnippet

context "math()"
snippet ls "sum of vectors" wA
{$1}_{$2}+\ldots+{$1}_{$3} $0
endsnippet

priority 1200
context "math()"
snippet '(?<!\\)(gdual|gddual|dim|ker|im|id|spn|chr|ev|tr|vect|Hom|Mor|End|Sym|Aut|rank|Stab|gKer|evIm|nll|Ann|GL|SL|PSL|PGL)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet