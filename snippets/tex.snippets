global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def text():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# Environment Snippets ––––––––––––––––––––––––––––––––––––––––

snippet bg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet cr "corollary" bA
\begin{corollary}
	$1
\end{corollary}
endsnippet

snippet df "defn" bA
\begin{defn}
	$1
\end{defn}
endsnippet

snippet dg "digression" bA
\begin{digression}
	$1
\end{digression}
endsnippet

snippet em. "emphasis" wA
\emph{$1}`!p
if t[2] and t[2][0] not in ',.?- :;)':
	snip.rv = ' '
else:
	snip.rv = ''
`
endsnippet

snippet en "Enumerate" bA
\begin{enumerate}[(a)]
	\item $1
\end{enumerate}
endsnippet

snippet ex "example" bA
\begin{example}
	$1
\end{example}
endsnippet

snippet ft "fact" bA
\begin{fact}
	$1
\end{fact}
endsnippet

snippet il "Itemize (List)" bA
\begin{itemize}
	\item $1
\end{itemize}
endsnippet

snippet it "item" bA
\item 
endsnippet

snippet iz "italicize" wA
\textit{$1}`!p
if t[2] and t[2][0] not in ',.?- :;)':
	snip.rv = ' '
else:
	snip.rv = ''
`
endsnippet

snippet lm "lemma" bA
\begin{lemma}
	$1
\end{lemma}
endsnippet

snippet nl "newline" bA
\newline

endsnippet

snippet pb "problem" bA
\begin{problem}[$1] %$2
	$3
\end{problem}
endsnippet

snippet pf "proof" bA
\begin{proof}
	$1
\end{proof}
endsnippet

snippet pr "proposition" bA
\begin{proposition}
	$1
\end{proposition}
endsnippet

snippet rm "remark" bA
\begin{remark}
	$1
\end{remark}
endsnippet

snippet so "solution" bA
\begin{solution}
	$1
\end{solution}

\newpage
endsnippet

snippet th "theorem" bA
\begin{theorem}
	$1
\end{theorem}
endsnippet

# Text Completions ––––––––––––––––––––––––––––––––––––––––

context "text()"
snippet fy "for any" wA
for any
endsnippet

context "text()"
snippet ie "i.e." wA
i.e.\\
endsnippet

context "text()"
snippet lt "let be a" wA
let $1 be a 
endsnippet

context "text()"
snippet Lt "let be a" wA
Let $1 be a 
endsnippet

context "text()"
snippet tx "there exists" wA
there exists
endsnippet

context "text()"
snippet st. "s.t." wA
s.t.
endsnippet

context "text()"
snippet wrt "with respect to" wA
with respect to
endsnippet

# Math Environments ––––––––––––––––––––––––––––––––––––––––

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in ',.?- :;)':
# [',', '.', '?', '-', ' ', ':', ';', ')']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet al "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet bn "big function" bA
\begin{align*}
	$1 \colon $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $0
.\end{align*}
endsnippet

context "math()"
snippet bx "Boxed math" wA
\boxed{$1}
endsnippet

context "math()"
snippet cs "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet dm "Math" bA
\[
	${1:${VISUAL}}
\] $0
endsnippet

snippet d.m "Math" bA
\[
	${1:${VISUAL}}
.\] $0
endsnippet

snippet d,m "Math" bA
\[
	${1:${VISUAL}}
,\] $0
endsnippet

context "math()"
snippet :- "function" iA
\colon $1 \to 
endsnippet

context "math()"
snippet tt "text" iA
\text{$1} 
endsnippet

context "math()"
snippet bf "textbf" iA
\textbf{$1} 
endsnippet

#snippet tt "texttt" wA
#\texttt{$1}
#endsnippet

#context "math()"
#snippet ub "underbrace" wA
#\underbrace{$1}_{$2}
#endsnippet

context "math()"
snippet mat "mat" wA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" wA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet set "set" wA
\left\\{ $1 \right\\}
endsnippet

context "math()"
snippet mbb "mathbb" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mfrak "mathfrak" iA
\mathfrak{$1}$0
endsnippet

snippet "([A-Za-z])mk" "math mode" rwA
$`!p snip.rv=match.group(1)`$
endsnippet

context "math()"
snippet "([A-Z])mb" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`} 
endsnippet

context "math()"
snippet "([A-Z])mc" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`} 
endsnippet

## CRITICAL: Requires anything with a slash is literal

# priority 1000
# context "math()"
# snippet '(?<=\\)(\w+)' "slash-esc" rwA
# \\`!p snip.rv = match.group(1)` 
# endsnippet

# Delimiters ––––––––––––––––––––––––––––––––––––––––

priority 0
context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left\langle ${1:${VISUAL}} \right\rangle $0
endsnippet

context "math()"
snippet lr_ "ceil" wA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet lr^ "floor" wA
\left\lfloor $1 \right\rfloor $0
endsnippet

# Symbols –––––––––––––––––––––––––––––––––––––––-

context "math()"
snippet tx "exists" iA
\exists 
endsnippet

context "math()"
snippet fy "forall" iA
\forall 
endsnippet

snippet RR "reals" iA
\R
endsnippet

snippet ZZ "integers" iA
\Z
endsnippet

snippet CC "complex" iA
\C
endsnippet

context "math()"
snippet 0/0 "emptyset" iA
\emptyset 
endsnippet

snippet FF "field" iA
\F
endsnippet

snippet QQ "rationals" iA
\Q
endsnippet

snippet NN "naturals" iA
\N
endsnippet

context "math()""
snippet TT "topology" iA
\T
endsnippet

context "math()"
snippet a. "alpha" iA
\alpha 
endsnippet

context "math()"
snippet b. "beta" iA
\beta 
endsnippet

context "math()"
snippet d. "delta" iA
\delta 
endsnippet

context "math()"
snippet e. "epsilon" iA
\epsilon 
endsnippet

context "math()"
snippet g. "gamma" iA
\gamma 
endsnippet

context "math()"
snippet h. "theta" iA
\theta 
endsnippet

context "math()"
snippet i. "iota" iA
\iota 
endsnippet

context "math()"
snippet k. "kappa" iA
\kappa 
endsnippet

context "math()"
snippet l. "lambda" iA
\lambda 
endsnippet

context "math()"
snippet n. "eta" iA
\eta 
endsnippet

context "math()"
snippet r. "rho" iA
\rho 
endsnippet

context "math()"
snippet s. "sigma" iA
\sigma 
endsnippet

context "math()"
snippet t. "tau" iA
\tau 
endsnippet

context "math()"
snippet v. "varepsilon" iA
\varepsilon 
endsnippet

context "math()"
snippet w. "omega" iA
\omega 
endsnippet

context "math()"
snippet vphi "varphi" iA
\varphi 
endsnippet

context "math()"
snippet !! "l" iA
\ell 
endsnippet

context "math()"
snippet OO "\infty" iA
\infty 
endsnippet

context "math()"
snippet ... "ldots" iA
\ldots 
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '(?<!\\)(zeta|vartheta|mu|pi|nu|phi|chi|psi|upsilon)' "greeks" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

context "math()"
snippet '(?<!\\)(Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)' "greeks3" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

# Superscripts ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet --1 "inverse" iA
^{-1}
endsnippet

# Subscripts ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)` 
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`} 
endsnippet

# General Operators ––––––––––––––––––––––––––––––––––––––––

priority 0
context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet oo "circ" iA
\circ 
endsnippet

# Set Operators ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet in "in " iA
\in 
endsnippet

priority 2000
context "math()"
snippet nin "n in " iA
n \in 
endsnippet

priority 0
context "math()"
snippet ni "not in " iA
\not\in 
endsnippet

context "math()"
snippet nn "cap" iA
\cap 
endsnippet

context "math()"
snippet uu "cup" iA
\cup 
endsnippet

# Note: \subset means subset OR equal; proper given by \subsetneq! (ref: Math 55 Slack)
context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet c=c "subsetneq" Ai
\subsetneq 
endsnippet

context "math()"
snippet || "mid" iA
\mid  
endsnippet

context "math()"
snippet UU "bigcup" iA
\bigcup 
endsnippet

context "math()"
snippet NN "bigcap" iA
\bigcap 
endsnippet

# Relations ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ~~ "sym" iA
\sim 
endsnippet

# Logical Arrows ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet => "implies" Ai
\implies 
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby 
endsnippet

context "math()"
snippet <=> "iff" Ai
\iff 
endsnippet

# Fractions ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# Functions ––––––––––––––––––––––––––––––––––––––––

context "math()"
snippet f1 "integral" iA
\int 
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|cot|csc|ln|log|exp)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|int|sum|min|max|pm|mp)' "funcs" rwA
\\`!p snip.rv = match.group(1)` 
endsnippet	

context "math()"
snippet pd "prod" iA
\prod 
endsnippet


# vim:ft=snippets
